plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco'
}

springBoot {
    buildInfo()
}
group = 'com.igse'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

ext['springCloudVersion'] = '2023.0.1'
ext['spring-framework.version'] = '6.1.13'
ext['tomcat.version'] = '10.1.25'



dependencies {
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.apache.commons:commons-lang3'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation("io.jsonwebtoken:jjwt-api:0.11.5")
    implementation("io.jsonwebtoken:jjwt-impl:0.11.5")
    implementation("io.jsonwebtoken:jjwt-jackson:0.11.5")
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('bootBuildImage') {
    builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}
bootJar {
    destinationDirectory.set(file("D:\\Project\\buildJars"))
}

bootRun{
    jvmArgs(["-Dspring.output.ansi.enabled=ALWAYS","-Dspring.profiles.active=dev"])
}
jacocoTestReport {
    reports {
        xml.required = false
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco')
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/igse/dto/**",
                    "com/igse/entity/**"
            ])
        }))
    }
}

//jacocoTestCoverageVerification {
//
//}
//check.dependsOn jacocoTestCoverageVerification

configurations.runtimeClasspath.resolutionStrategy.activateDependencyLocking()